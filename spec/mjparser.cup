package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, LEFTBRACE, RIGHTBRACE, NAMESPACE, LEFTBRACKET, RIGHTBRACKET, LEFTPAREN, RIGHTPAREN, SEMICOLON, COMMA, STATIC ;

terminal CONST, VOID, NEW, CLASS, EXTENDS, DOT, ARROW ;

terminal EQUAL, ISEQUAL, NOTEQUAL, GREATER, GREATEREQUAL, LESS, LESSEQUAL, PLUS, MINUS, MULTIPLY, DIVIDE, MODUO, DOUBLECOLON ;

terminal IF, ELSE, BREAK, CONTINUE, RETURN, READ, PRINT, FOR, INCREMENT, DECREMENT, AND, OR, COLON ;

nonterminal Program, NamespaceList, DeclarationList, Namespace, Declaration, VarDecl, Type, Label ;

nonterminal Constant, ConstDecl, ConstantList, ConstantDeclaration, VarList, Variable, StaticInitializer, StatementList ;

nonterminal MethodDeclList, MethodDecl, MethodReturnType, MethodParamList, FormParsList, VarDeclList, OneParamMethod, FactorNewType ;

nonterminal Statement, DesignatorStatement, ForDesignatorStatement, InnerForDesignatorStatement, InnerForDesignatorStatementList, ForCondFact, MethodName ;

nonterminal Designator, Expr, InsideFor, FirstDesignator, SecondDesignator, DesignatorList, OneDesignator, IdentExpressList, IdentExpressListElem, ArrayBrackets ;

nonterminal DesignatorIdentificator, NamespaceName, Assignop, Relop, Addop, Mulop, ActParsList, ActPars, Condition, CondFact, CondTerm, Term, AddopTermList, Factor, FactorMulopList, ProgramName ;

nonterminal StatementElseStatement, StatementReturn, StatementPrint ;

terminal String IDENTIFICATOR;
terminal Character CHARCONSTANT;
terminal Integer NUMCONSTANT;
terminal Boolean BOOLCONSTANT;

precedence left ELSE;

Program ::= PROGRAM ProgramName NamespaceList DeclarationList LEFTBRACE MethodDeclList RIGHTBRACE ;

ProgramName ::= IDENTIFICATOR ;

NamespaceList ::= NamespaceList Namespace
				|
					/*epsilon*/
				;

Namespace ::= NAMESPACE NamespaceName LEFTBRACE DeclarationList LEFTBRACE MethodDeclList RIGHTBRACE RIGHTBRACE ;

NamespaceName ::= IDENTIFICATOR ;

DeclarationList ::= DeclarationList Declaration
				|
					/*epsilon*/
				;

Declaration ::= ConstDecl 
				|
				 VarDecl 
				/*|
				 ClassDecl*/
				;
				
ConstDecl ::= CONST Type ConstantList SEMICOLON ;

ConstantList ::= ConstantList COMMA ConstantDeclaration 
				|
				ConstantDeclaration
				;

ConstantDeclaration ::= IDENTIFICATOR EQUAL Constant ;

Constant ::= NUMCONSTANT 
			|
			CHARCONSTANT  
			|
			BOOLCONSTANT 
			;
			
VarDecl ::= Type VarList SEMICOLON ;

VarList ::= VarList COMMA Variable 
			|
			Variable
			;

Variable ::= IDENTIFICATOR ArrayBrackets ;

ArrayBrackets ::= (HasArrayBrackets) LEFTBRACKET RIGHTBRACKET
					|
				  (NoArrayBrackets) /*epsilon*/
				  ;

StaticInitializer ::= STATIC LEFTBRACE StatementList RIGHTBRACE ;

MethodDeclList ::= MethodDeclList MethodDecl
					|
					/*epsilon*/
					;

MethodDecl ::= MethodReturnType MethodName LEFTPAREN MethodParamList RIGHTPAREN VarDeclList LEFTBRACE StatementList RIGHTBRACE ;

MethodName ::= IDENTIFICATOR ;

MethodReturnType ::= Type | VOID ;

MethodParamList ::= FormParsList 
					|
					/*epsilon*/
					;


FormParsList ::= FormParsList COMMA OneParamMethod
				|
				OneParamMethod
				;

OneParamMethod ::= Type IDENTIFICATOR ArrayBrackets ;

VarDeclList ::= VarDeclList VarDecl
				|
				/*epsilon*/
				;
				
Type ::= IDENTIFICATOR
		 |
		 IDENTIFICATOR DOUBLECOLON IDENTIFICATOR;

Statement ::= DesignatorStatement SEMICOLON
				|
				IF LEFTPAREN Condition RIGHTPAREN Statement StatementElseStatement
				|
				BREAK SEMICOLON
				|
				CONTINUE SEMICOLON
				|
				RETURN StatementReturn
				|
				READ LEFTPAREN Designator RIGHTPAREN SEMICOLON
				|
				PRINT LEFTPAREN Expr StatementPrint
				|
				FOR LEFTPAREN InsideFor RIGHTPAREN Statement
				|
				LEFTBRACE StatementList RIGHTBRACE
			 	;

StatementElseStatement ::= ELSE Statement
							|
							/*epsilon*/
							;

StatementReturn ::= SEMICOLON
					|
					Expr SEMICOLON
					;

StatementPrint ::= RIGHTPAREN SEMICOLON
					|
				   COMMA NUMCONSTANT RIGHTPAREN SEMICOLON
				   ;

InsideFor ::= ForDesignatorStatement SEMICOLON ForCondFact SEMICOLON ForDesignatorStatement ;

ForCondFact ::= CondFact 
				|
				/*epsilon*/
				;
				
ForDesignatorStatement ::= InnerForDesignatorStatement
							|
							/*epsilon*/
							;

InnerForDesignatorStatement ::= DesignatorStatement InnerForDesignatorStatementList ;

InnerForDesignatorStatementList ::= InnerForDesignatorStatementList COMMA DesignatorStatement
									|
									/*epsilon*/
									;

StatementList ::=  StatementList Statement
				|
				/*epsilon */
			 	;

DesignatorStatement ::= Designator FirstDesignator
						|
						SecondDesignator EQUAL Designator
						;

FirstDesignator ::= Assignop Expr
					|
					LEFTPAREN ActParsList RIGHTPAREN
					|
					INCREMENT
					|
					DECREMENT
					;
				
SecondDesignator ::= LEFTBRACKET DesignatorList MULTIPLY Designator RIGHTBRACKET ;

DesignatorList ::= DesignatorList COMMA OneDesignator
					|
					OneDesignator
					;
					
OneDesignator ::= Designator 
					|
					/*epsilon*/
					;
					
ActPars ::= ActPars COMMA Expr
			|
			Expr
			;
			
Condition ::= Condition OR CondTerm
				|
				CondTerm
				;
				
CondTerm ::= CondTerm AND CondFact
			|
			CondFact
			;

CondFact ::= Expr Relop Expr
			|
			Expr
			;
			
Expr ::= Term AddopTermList
		|
		MINUS Term AddopTermList
		;

AddopTermList ::= AddopTermList Addop Term
				|
				/*epsilon*/
				;
				
Term ::= Factor FactorMulopList ;

FactorMulopList ::= FactorMulopList Mulop Factor
					|
					/*epsilon*/
					;

Factor ::= Designator LEFTPAREN ActParsList RIGHTPAREN
			|
			Designator
			|
			NUMCONSTANT
			|
			CHARCONSTANT
			|
			BOOLCONSTANT
			|
			NEW Type FactorNewType
			|
			LEFTPAREN Expr RIGHTPAREN
			;
	
FactorNewType ::= LEFTBRACKET Expr RIGHTBRACKET
				  |
				  LEFTPAREN ActPars RIGHTPAREN
				  ;
		
ActParsList ::= ActPars
				|
				/*epsilon*/
				;

Designator ::= 	IDENTIFICATOR DesignatorIdentificator;
			
DesignatorIdentificator ::= DOUBLECOLON IDENTIFICATOR IdentExpressList
							|
							IdentExpressList
							;

IdentExpressList ::= IdentExpressList IdentExpressListElem
					|
					/*epsilon*/
					;

IdentExpressListElem ::= DOT IDENTIFICATOR
						 |
						 LEFTBRACKET Expr RIGHTBRACKET
						 ;

Label ::= IDENTIFICATOR ;

Assignop ::= EQUAL ;

Relop ::= ISEQUAL | NOTEQUAL | GREATER | GREATEREQUAL | LESS | LESSEQUAL ;

Addop ::= PLUS | MINUS ;

Mulop ::= MULTIPLY | DIVIDE | MODUO ;