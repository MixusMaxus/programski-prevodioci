package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, LEFTBRACE, RIGHTBRACE, LEFTBRACKET, RIGHTBRACKET, LEFTPAREN, RIGHTPAREN, SEMICOLON, COMMA, STATIC, RANGE ;

terminal CONST, VOID, NEW, CLASS, EXTENDS, DOT, ARROW, IN ;

terminal EQUAL, ISEQUAL, NOTEQUAL, GREATER, GREATEREQUAL, LESS, LESSEQUAL, PLUS, MINUS, MULTIPLY, DIVIDE, MODUO, DOUBLECOLON ;

terminal IF, ELSE, BREAK, CONTINUE, RETURN, READ, PRINT, FOR, INCREMENT, DECREMENT, AND, OR, COLON, INCDOBL, OPERATOR, SUSEDI, SUM ;

nonterminal DeclarationList, Declaration, VarDecl, Label ;

nonterminal ConstDecl, ConstantList, VarList, StaticInitializer, StatementList ;

nonterminal MethodDeclList, MethodParamList, FormParsList, MethodVariableList, FactorNewType ;

nonterminal Statement, DesignatorStatement, ForDesignatorStatement, InnerForDesignatorStatement, InnerForDesignatorStatementList, ForCondFact ;

nonterminal InsideFor, DesignatorList, OneDesignator, ArrayBrackets ;

nonterminal DesignatorIdentificator, Assignop, Relop, Addop, Mulop, ActParsList, ActPars ;

nonterminal For, StatementElseStatement, StatementReturn, StatementPrint, FactorDesignatorActParsList, IfMaybe ;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgramName, ConstantDeclaration, Variable, MethodDecl, MethodName, OneParamMethod, Designator, IdentExpressList, DesignatorName ;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Constant, Factor, MethodReturnType, Condition, CondTerm, CondFact, CondFactExprRelopExpr, Expr, AddopTermList, Term, FactorMulopList ;

terminal String IDENTIFICATOR;
terminal Character CHARCONSTANT;
terminal Integer NUMCONSTANT;
terminal Boolean BOOLCONSTANT;

precedence left ELSE;

Program ::= (Program) PROGRAM ProgramName:programName DeclarationList LEFTBRACE MethodDeclList RIGHTBRACE ;

ProgramName ::= (ProgramName) IDENTIFICATOR:programName ;

DeclarationList ::= (MultipleDeclarations) DeclarationList Declaration
				    |
					(NoDeclarations)/*epsilon*/
				    ;

Declaration ::= (DeclarationConstDecl) ConstDecl 
				|
				(DeclarationVarDecl) VarDecl 
				/*|
				 ClassDecl*/
				;
				
ConstDecl ::= (ConstDecl) CONST Type ConstantList SEMICOLON ;

ConstantList ::= (MultipleConstants) ConstantList COMMA ConstantDeclaration 
				|
				(OneConstant) ConstantDeclaration
				;

ConstantDeclaration ::= (ConstantDeclaration) IDENTIFICATOR:constName EQUAL Constant ;

Constant ::= (NumberConstant) NUMCONSTANT:numValue 
			|
			(CharacterConstant) CHARCONSTANT:charValue  
			|
			(BooleanConstant) BOOLCONSTANT:boolValue 
			;
			
VarDecl ::= (VarDecl) Type VarList SEMICOLON ;

VarList ::= (MultipleVariables) VarList COMMA Variable 
			|
			(OneVariable) Variable
			;

Variable ::= (VariableDecl) IDENTIFICATOR:varName ArrayBrackets
				|
			(ErrorVariable)	error SEMICOLON:l {: parser.report_error("Greska kod deklaracije promenljive na liniji " + lleft, null); :}
			;

ArrayBrackets ::= (HasArrayBrackets) LEFTBRACKET RIGHTBRACKET
					|
				  (NoArrayBrackets) /*epsilon*/
				  ;

StaticInitializer ::= (StaticInitializer) STATIC LEFTBRACE StatementList RIGHTBRACE ;

MethodDeclList ::= (MultipleMethodDeclarations) MethodDeclList MethodDecl
					|
					(NoMethodDeclarations) /*epsilon*/
					;

MethodDecl ::= (MethodDecl) MethodReturnType MethodName LEFTPAREN MethodParamList RIGHTPAREN MethodVariableList LEFTBRACE StatementList RIGHTBRACE ;

MethodName ::= (MethodName) IDENTIFICATOR:methodName ;

MethodReturnType ::= (MethodReturnTypeType)Type 
					  | 
					 (MethodReturnTypeVoid)VOID ;

MethodParamList ::= (MultipleMethodParamethers) FormParsList 
					|
					(NoMethodParamethers) /*epsilon*/
					;


FormParsList ::= (MultipleFormParamethers) FormParsList COMMA OneParamMethod
				|
				(OneFormParamether) OneParamMethod
				;

OneParamMethod ::= (OneParametherMethod) Type IDENTIFICATOR:argName ArrayBrackets
					|
				   (OneParametherMethodError) error RIGHTPAREN:l   {: parser.report_error("Greska kod deklaracije formalnog parametra funkcije na liniji. " + lleft, null); :} 
				   ;

MethodVariableList ::= (MultipleVarDeclarations) MethodVariableList VarDecl
				|
				(NoVarDeclarations) /*epsilon*/
				;
				
Type ::= (Type) IDENTIFICATOR:typeName
		 /*|
		 (NenormalanType) IDENTIFICATOR DOUBLECOLON IDENTIFICATOR*/;

Statement ::= (StatementDesignator) DesignatorStatement SEMICOLON
				|
				(StatementIfElse) IF LEFTPAREN Condition RIGHTPAREN Statement StatementElseStatement
				|
				(StatementBreak) BREAK SEMICOLON
				|
				(StatementContinue) CONTINUE SEMICOLON
				|
				(ReturnStatement) RETURN StatementReturn SEMICOLON
				|
				(StatementRead) READ LEFTPAREN Designator RIGHTPAREN SEMICOLON
				|
				(PrintStatement) PRINT LEFTPAREN Expr StatementPrint RIGHTPAREN SEMICOLON
				|
				(StatementFor) For LEFTPAREN InsideFor RIGHTPAREN Statement
				|
				(MultipleStatements) LEFTBRACE StatementList RIGHTBRACE
			 	;
				
For ::= (For) FOR ;

StatementElseStatement ::= (ElseStatement) ELSE Statement
							|
							(NoElseStatement) /*epsilon*/
							;

StatementReturn ::= (StmtReturnExpr) Expr
					|
					(StmtReturnVoid) /*epsilon*/
					;

StatementPrint ::= (StmtPrintComplex) COMMA NUMCONSTANT
					|
					(StmtPrintBasic) /*epsilon*/
				   ;

InsideFor ::= (InsideFor) ForDesignatorStatement SEMICOLON ForCondFact SEMICOLON ForDesignatorStatement ;

ForCondFact ::= (ForCndFact) CondFact 
				|
				(NoForCndFact)/*epsilon*/
				;
				
ForDesignatorStatement ::= (ForDesignatorStmtInner) InnerForDesignatorStatement
							|
							(NoForDesignatorStmt)/*epsilon*/
							;

InnerForDesignatorStatement ::= (InnerForDesignatorStatement) DesignatorStatement InnerForDesignatorStatementList ;

InnerForDesignatorStatementList ::= (MultipleInnerForDesignatorStatementLists) InnerForDesignatorStatementList COMMA DesignatorStatement
									|
									(NoInnerForDesignatorStatementLists) /*epsilon*/
									;

StatementList ::= (MultipleStatementsLists) StatementList Statement
				|
				(NoStatementsLists) /*epsilon */
			 	;
				
DesignatorStatement ::=     (DesignatorAssignop) Designator Assignop Expr
							|
							(DesignatorFunctionCall) Designator LEFTPAREN ActParsList RIGHTPAREN
							|
							(DesignatorIncrement) Designator INCREMENT
							|
							(DesignatorDecrement) Designator DECREMENT
							|
							(DesignatorIncDobl) Designator INCDOBL
							|
							(MultipleAssignements) LEFTBRACKET DesignatorList MULTIPLY Designator:d1 RIGHTBRACKET EQUAL Designator:d2
							|
							(DSListComprehension) Designator:des1 EQUAL LEFTBRACKET FOR Expr IN Designator:des2 IfMaybe RIGHTBRACKET
							;

IfMaybe ::= (ActualIf) IF Condition
			|
			(NoIF) /*epsilon*/
			;

DesignatorList ::= (MultipleDesignatorLists) DesignatorList COMMA OneDesignator
					|
					(OneDsg) OneDesignator
					;
					
OneDesignator ::= (OneDesignatorDsg) Designator 
					|
					(NoDesignator) /*epsilon*/
					;
					
ActPars ::= (MultipleActPars) ActPars COMMA Expr
			|
			(ActParsExpr) Expr
			;
			
Condition ::=   (ConditionOr) Condition OR CondTerm
				|
				(ConditionCondTerm) CondTerm
				|
				(ConditionError) error RIGHTPAREN:l   {: parser.report_error("Greska kod logickog izraza unutar if konstrukcije na liniji. " + lleft, null); :} 
				;
				
CondTerm ::= (CondTermAnd) CondTerm AND CondFact
			|
			(CondTermFact) CondFact
			;

CondFact ::= (CondFact) Expr CondFactExprRelopExpr ;
			
			
CondFactExprRelopExpr ::= (CondFactComplex) Relop Expr
							|
							(CondFactSimple) /*epsilon*/
							;
			
Expr ::= (ExprTerm) AddopTermList
		|
		(ExprMinus) MINUS AddopTermList
		;

AddopTermList ::= (MultipleAddopTerms) AddopTermList Addop Term
				|
				(OneTermAddopTerm) Term
				;
				
Term ::= (Term) FactorMulopList ;

FactorMulopList ::= (MultipleFactorMulopLists) FactorMulopList Mulop Factor
					|
					(OneFactorMulopList) Factor
					;

Factor ::= (FactorDesignator) Designator FactorDesignatorActParsList
			|
			(FactorNumCnst) NUMCONSTANT:numValue
			|
			(FactorCharCnst)CHARCONSTANT:charValue
			|
			(FactorBoolCnst)BOOLCONSTANT:boolValue
			|
			(FactorNewArray) NEW Type LEFTBRACKET Expr RIGHTBRACKET
			/*
			|
			(FactorNewClass) NEW Type LEFTPAREN ActPars RIGHTPAREN
			*/
			|
			(FactorExpr) LEFTPAREN Expr RIGHTPAREN
			|
			(FactorRange) RANGE LEFTPAREN Expr RIGHTPAREN
			|
			(FactorSum) SUM LEFTPAREN Expr RIGHTPAREN
			;
			
FactorDesignatorActParsList ::= (ParenPars) LEFTPAREN ActParsList RIGHTPAREN
								|
								(NoParenPars) /*epsilon*/
								;
		
ActParsList ::= (ActParsComplex) ActPars
				|
				(NoActPars) /*epsilon*/
				;
				
Designator ::= (Designator) DesignatorName IdentExpressList ;

DesignatorName ::= (DesignatorName) IDENTIFICATOR:designatorName ;

IdentExpressList ::= (MultiplesIdentExpresses) LEFTBRACKET Expr RIGHTBRACKET
					|
					(NoIdentExpresses)/*epsilon*/
					;

Label ::= (Label) IDENTIFICATOR ;

Assignop ::= (AssignopEqual) EQUAL
			|
			(AssignopError)error SEMICOLON:l {: parser.report_error("Greska kod dodele vrednosti na liniji " + lleft, null); :}
			;

Relop ::=  (RelopEqual)ISEQUAL 
			| 
			(RelopNotEqual)NOTEQUAL 
			| 
			(RelopGrt)GREATER 
			| 
			(RelopGrtEqual)GREATEREQUAL 
			| 
			(RelopLess)LESS 
			| 
			(RelopLessEqual)LESSEQUAL 
			;

Addop ::= (AddopPlus)PLUS 
		| 
		(AddopMinus)MINUS 
		;

Mulop ::= (MulopMul) MULTIPLY 
		| 
		(MulopDiv)DIVIDE 
		| 
		(MulopMod)MODUO 
		|
		(MulopOperator)OPERATOR
		|
		(MulopSusedi) SUSEDI
		;