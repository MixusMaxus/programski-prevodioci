package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, LEFTBRACE, RIGHTBRACE, LEFTBRACKET, RIGHTBRACKET, LEFTPAREN, RIGHTPAREN, SEMICOLON, COMMA, STATIC, RANGE ;

terminal CONST, VOID, NEW, CLASS, EXTENDS, DOT, ARROW, IN ;

terminal EQUAL, ISEQUAL, NOTEQUAL, GREATER, GREATEREQUAL, LESS, LESSEQUAL, PLUS, MINUS, MULTIPLY, DIVIDE, MODUO, DOUBLECOLON ;

terminal IF, ELSE, BREAK, CONTINUE, RETURN, READ, PRINT, FOR, INCREMENT, DECREMENT, AND, OR, COLON, INCDOBL ;

nonterminal DeclarationList DeclarationList;
nonterminal Declaration Declaration;
nonterminal VarDecl VarDecl;
nonterminal Label Label ;

nonterminal ConstDecl ConstDecl;
nonterminal ConstantList ConstantList;
nonterminal VarList VarList;
nonterminal StaticInitializer StaticInitializer;
nonterminal StatementList StatementList ;

nonterminal MethodDeclList MethodDeclList;
nonterminal MethodParamList MethodParamList;
nonterminal FormParsList FormParsList;
nonterminal MethodVariableList MethodVariableList;
nonterminal FactorNewType FactorNewType ;

nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal ForDesignatorStatement ForDesignatorStatement;
nonterminal InnerForDesignatorStatement InnerForDesignatorStatement;
nonterminal InnerForDesignatorStatementList InnerForDesignatorStatementList;
nonterminal ForCondFact ForCondFact ;

nonterminal InsideFor InsideFor;
nonterminal DesignatorList DesignatorList;
nonterminal OneDesignator OneDesignator;
nonterminal ArrayBrackets ArrayBrackets ;

nonterminal DesignatorIdentificator DesignatorIdentificator;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal ActParsList ActParsList;
nonterminal ActPars ActPars ;

nonterminal For For;
nonterminal StatementElseStatement StatementElseStatement;
nonterminal StatementReturn StatementReturn;
nonterminal StatementPrint StatementPrint;
nonterminal FactorDesignatorActParsList FactorDesignatorActParsList;
nonterminal IfMaybe IfMaybe ;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgramName, ConstantDeclaration, Variable, MethodDecl, MethodName, OneParamMethod, Designator, IdentExpressList, DesignatorName ;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Constant, Factor, MethodReturnType, Condition, CondTerm, CondFact, CondFactExprRelopExpr, Expr, AddopTermList, Term, FactorMulopList ;

terminal String IDENTIFICATOR;
terminal Character CHARCONSTANT;
terminal Integer NUMCONSTANT;
terminal Boolean BOOLCONSTANT;

precedence left ELSE;

Program ::= (Program) PROGRAM ProgramName:programName DeclarationList:D1 LEFTBRACE MethodDeclList:M2 RIGHTBRACE {: RESULT=new Program(programName, D1, M2); RESULT.setLine(programNameleft); :} ;

ProgramName ::= (ProgramName) IDENTIFICATOR:programName {: RESULT=new ProgramName(programName); RESULT.setLine(programNameleft); :} ;

DeclarationList ::= (MultipleDeclarations) DeclarationList:D1 Declaration:D2 {: RESULT=new MultipleDeclarations(D1, D2); RESULT.setLine(D1left); :}
				    |
					(NoDeclarations) {: RESULT=new NoDeclarations(); :}/*epsilon*/
				    ;

Declaration ::= (DeclarationConstDecl) ConstDecl:C1 {: RESULT=new DeclarationConstDecl(C1); RESULT.setLine(C1left); :} 
				|
				(DeclarationVarDecl) VarDecl:V1 {: RESULT=new DeclarationVarDecl(V1); RESULT.setLine(V1left); :} 
				/*|
				 ClassDecl*/
				;
				
ConstDecl ::= (ConstDecl) CONST Type:T1 ConstantList:C2 SEMICOLON {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :} ;

ConstantList ::= (MultipleConstants) ConstantList:C1 COMMA ConstantDeclaration:C2 {: RESULT=new MultipleConstants(C1, C2); RESULT.setLine(C1left); :} 
				|
				(OneConstant) ConstantDeclaration:C1 {: RESULT=new OneConstant(C1); RESULT.setLine(C1left); :}
				;

ConstantDeclaration ::= (ConstantDeclaration) IDENTIFICATOR:constName EQUAL Constant:C1 {: RESULT=new ConstantDeclaration(constName, C1); RESULT.setLine(constNameleft); :} ;

Constant ::= (NumberConstant) NUMCONSTANT:numValue {: RESULT=new NumberConstant(numValue); RESULT.setLine(numValueleft); :} 
			|
			(CharacterConstant) CHARCONSTANT:charValue {: RESULT=new CharacterConstant(charValue); RESULT.setLine(charValueleft); :}  
			|
			(BooleanConstant) BOOLCONSTANT:boolValue {: RESULT=new BooleanConstant(boolValue); RESULT.setLine(boolValueleft); :} 
			;
			
VarDecl ::= (VarDecl) Type:T1 VarList:V2 SEMICOLON {: RESULT=new VarDecl(T1, V2); RESULT.setLine(T1left); :} ;

VarList ::= (MultipleVariables) VarList:V1 COMMA Variable:V2 {: RESULT=new MultipleVariables(V1, V2); RESULT.setLine(V1left); :} 
			|
			(OneVariable) Variable:V1 {: RESULT=new OneVariable(V1); RESULT.setLine(V1left); :}
			;

Variable ::= (VariableDecl) IDENTIFICATOR:varName ArrayBrackets:A1 {: RESULT=new VariableDecl(varName, A1); RESULT.setLine(varNameleft); :}
				|
			(ErrorVariable)	error SEMICOLON:l {: parser.report_error("Greska kod deklaracije promenljive na liniji " + lleft, null); :} {: RESULT=new ErrorVariable(); :}
			;

ArrayBrackets ::= (HasArrayBrackets) LEFTBRACKET RIGHTBRACKET {: RESULT=new HasArrayBrackets(); :}
					|
				  (NoArrayBrackets) {: RESULT=new NoArrayBrackets(); :} /*epsilon*/
				  ;

StaticInitializer ::= (StaticInitializer) STATIC LEFTBRACE StatementList:S1 RIGHTBRACE {: RESULT=new StaticInitializer(S1); RESULT.setLine(S1left); :} ;

MethodDeclList ::= (MultipleMethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MultipleMethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodDeclarations) {: RESULT=new NoMethodDeclarations(); :} /*epsilon*/
					;

MethodDecl ::= (MethodDecl) MethodReturnType:M1 MethodName:M2 LEFTPAREN MethodParamList:M3 RIGHTPAREN MethodVariableList:M4 LEFTBRACE StatementList:S5 RIGHTBRACE {: RESULT=new MethodDecl(M1, M2, M3, M4, S5); RESULT.setLine(M1left); :} ;

MethodName ::= (MethodName) IDENTIFICATOR:methodName {: RESULT=new MethodName(methodName); RESULT.setLine(methodNameleft); :} ;

MethodReturnType ::= (MethodReturnTypeType)Type:T1 {: RESULT=new MethodReturnTypeType(T1); RESULT.setLine(T1left); :} 
					  | 
					 (MethodReturnTypeVoid)VOID {: RESULT=new MethodReturnTypeVoid(); :} ;

MethodParamList ::= (MultipleMethodParamethers) FormParsList:F1 {: RESULT=new MultipleMethodParamethers(F1); RESULT.setLine(F1left); :} 
					|
					(NoMethodParamethers) {: RESULT=new NoMethodParamethers(); :} /*epsilon*/
					;


FormParsList ::= (MultipleFormParamethers) FormParsList:F1 COMMA OneParamMethod:O2 {: RESULT=new MultipleFormParamethers(F1, O2); RESULT.setLine(F1left); :}
				|
				(OneFormParamether) OneParamMethod:O1 {: RESULT=new OneFormParamether(O1); RESULT.setLine(O1left); :}
				;

OneParamMethod ::= (OneParametherMethod) Type:T1 IDENTIFICATOR:argName ArrayBrackets:A2 {: RESULT=new OneParametherMethod(T1, argName, A2); RESULT.setLine(T1left); :}
					|
				   (OneParametherMethodError) error RIGHTPAREN:l   {: parser.report_error("Greska kod deklaracije formalnog parametra funkcije na liniji. " + lleft, null); :} {: RESULT=new OneParametherMethodError(); :} 
				   ;

MethodVariableList ::= (MultipleVarDeclarations) MethodVariableList:M1 VarDecl:V2 {: RESULT=new MultipleVarDeclarations(M1, V2); RESULT.setLine(M1left); :}
				|
				(NoVarDeclarations) {: RESULT=new NoVarDeclarations(); :} /*epsilon*/
				;
				
Type ::= (Type) IDENTIFICATOR:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :}
		 /*|
		 (NenormalanType) IDENTIFICATOR DOUBLECOLON IDENTIFICATOR*/;

Statement ::= (StatementDesignator) DesignatorStatement:D1 SEMICOLON {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
				|
				(StatementIfElse) IF LEFTPAREN Condition:C1 RIGHTPAREN Statement:S2 StatementElseStatement:S3 {: RESULT=new StatementIfElse(C1, S2, S3); RESULT.setLine(C1left); :}
				|
				(StatementBreak) BREAK SEMICOLON {: RESULT=new StatementBreak(); :}
				|
				(StatementContinue) CONTINUE SEMICOLON {: RESULT=new StatementContinue(); :}
				|
				(ReturnStatement) RETURN StatementReturn:S1 SEMICOLON {: RESULT=new ReturnStatement(S1); RESULT.setLine(S1left); :}
				|
				(StatementRead) READ LEFTPAREN Designator:D1 RIGHTPAREN SEMICOLON {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :}
				|
				(PrintStatement) PRINT LEFTPAREN Expr:E1 StatementPrint:S2 RIGHTPAREN SEMICOLON {: RESULT=new PrintStatement(E1, S2); RESULT.setLine(E1left); :}
				|
				(StatementFor) For:F1 LEFTPAREN InsideFor:I2 RIGHTPAREN Statement:S3 {: RESULT=new StatementFor(F1, I2, S3); RESULT.setLine(F1left); :}
				|
				(MultipleStatements) LEFTBRACE StatementList:S1 RIGHTBRACE {: RESULT=new MultipleStatements(S1); RESULT.setLine(S1left); :}
			 	;
				
For ::= (For) FOR {: RESULT=new For(); :} ;

StatementElseStatement ::= (ElseStatement) ELSE Statement:S1 {: RESULT=new ElseStatement(S1); RESULT.setLine(S1left); :}
							|
							(NoElseStatement) {: RESULT=new NoElseStatement(); :} /*epsilon*/
							;

StatementReturn ::= (StmtReturnExpr) Expr:E1 {: RESULT=new StmtReturnExpr(E1); RESULT.setLine(E1left); :}
					|
					(StmtReturnVoid) {: RESULT=new StmtReturnVoid(); :} /*epsilon*/
					;

StatementPrint ::= (StmtPrintComplex) COMMA NUMCONSTANT:N1 {: RESULT=new StmtPrintComplex(N1); RESULT.setLine(N1left); :}
					|
					(StmtPrintBasic) {: RESULT=new StmtPrintBasic(); :} /*epsilon*/
				   ;

InsideFor ::= (InsideFor) ForDesignatorStatement:F1 SEMICOLON ForCondFact:F2 SEMICOLON ForDesignatorStatement:F3 {: RESULT=new InsideFor(F1, F2, F3); RESULT.setLine(F1left); :} ;

ForCondFact ::= (ForCndFact) CondFact:C1 {: RESULT=new ForCndFact(C1); RESULT.setLine(C1left); :} 
				|
				(NoForCndFact) {: RESULT=new NoForCndFact(); :}/*epsilon*/
				;
				
ForDesignatorStatement ::= (ForDesignatorStmtInner) InnerForDesignatorStatement:I1 {: RESULT=new ForDesignatorStmtInner(I1); RESULT.setLine(I1left); :}
							|
							(NoForDesignatorStmt) {: RESULT=new NoForDesignatorStmt(); :}/*epsilon*/
							;

InnerForDesignatorStatement ::= (InnerForDesignatorStatement) DesignatorStatement:D1 InnerForDesignatorStatementList:I2 {: RESULT=new InnerForDesignatorStatement(D1, I2); RESULT.setLine(D1left); :} ;

InnerForDesignatorStatementList ::= (MultipleInnerForDesignatorStatementLists) InnerForDesignatorStatementList:I1 COMMA DesignatorStatement:D2 {: RESULT=new MultipleInnerForDesignatorStatementLists(I1, D2); RESULT.setLine(I1left); :}
									|
									(NoInnerForDesignatorStatementLists) {: RESULT=new NoInnerForDesignatorStatementLists(); :} /*epsilon*/
									;

StatementList ::= (MultipleStatementsLists) StatementList:S1 Statement:S2 {: RESULT=new MultipleStatementsLists(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStatementsLists) {: RESULT=new NoStatementsLists(); :} /*epsilon */
			 	;
				
DesignatorStatement ::=     (DesignatorAssignop) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorAssignop(D1, A2, E3); RESULT.setLine(D1left); :}
							|
							(DesignatorFunctionCall) Designator:D1 LEFTPAREN ActParsList:A2 RIGHTPAREN {: RESULT=new DesignatorFunctionCall(D1, A2); RESULT.setLine(D1left); :}
							|
							(DesignatorIncrement) Designator:D1 INCREMENT {: RESULT=new DesignatorIncrement(D1); RESULT.setLine(D1left); :}
							|
							(DesignatorDecrement) Designator:D1 DECREMENT {: RESULT=new DesignatorDecrement(D1); RESULT.setLine(D1left); :}
							|
							(DesignatorIncDobl) Designator:D1 INCDOBL {: RESULT=new DesignatorIncDobl(D1); RESULT.setLine(D1left); :}
							|
							(MultipleAssignements) LEFTBRACKET DesignatorList:D1 MULTIPLY Designator:d1 RIGHTBRACKET EQUAL Designator:d2 {: RESULT=new MultipleAssignements(D1, d1, d2); RESULT.setLine(D1left); :}
							|
							(DSListComprehension) Designator:des1 EQUAL LEFTBRACKET FOR Expr:E1 IN Designator:des2 IfMaybe:I2 RIGHTBRACKET {: RESULT=new DSListComprehension(des1, E1, des2, I2); RESULT.setLine(des1left); :}
							;

IfMaybe ::= (ActualIf) IF Condition:C1 {: RESULT=new ActualIf(C1); RESULT.setLine(C1left); :}
			|
			(NoIF) {: RESULT=new NoIF(); :} /*epsilon*/
			;

DesignatorList ::= (MultipleDesignatorLists) DesignatorList:D1 COMMA OneDesignator:O2 {: RESULT=new MultipleDesignatorLists(D1, O2); RESULT.setLine(D1left); :}
					|
					(OneDsg) OneDesignator:O1 {: RESULT=new OneDsg(O1); RESULT.setLine(O1left); :}
					;
					
OneDesignator ::= (OneDesignatorDsg) Designator:D1 {: RESULT=new OneDesignatorDsg(D1); RESULT.setLine(D1left); :} 
					|
					(NoDesignator) {: RESULT=new NoDesignator(); :} /*epsilon*/
					;
					
ActPars ::= (MultipleActPars) ActPars:A1 COMMA Expr:E2 {: RESULT=new MultipleActPars(A1, E2); RESULT.setLine(A1left); :}
			|
			(ActParsExpr) Expr:E1 {: RESULT=new ActParsExpr(E1); RESULT.setLine(E1left); :}
			;
			
Condition ::=   (ConditionOr) Condition:C1 OR CondTerm:C2 {: RESULT=new ConditionOr(C1, C2); RESULT.setLine(C1left); :}
				|
				(ConditionCondTerm) CondTerm:C1 {: RESULT=new ConditionCondTerm(C1); RESULT.setLine(C1left); :}
				|
				(ConditionError) error RIGHTPAREN:l   {: parser.report_error("Greska kod logickog izraza unutar if konstrukcije na liniji. " + lleft, null); :} {: RESULT=new ConditionError(); :} 
				;
				
CondTerm ::= (CondTermAnd) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermAnd(C1, C2); RESULT.setLine(C1left); :}
			|
			(CondTermFact) CondFact:C1 {: RESULT=new CondTermFact(C1); RESULT.setLine(C1left); :}
			;

CondFact ::= (CondFact) Expr:E1 CondFactExprRelopExpr:C2 {: RESULT=new CondFact(E1, C2); RESULT.setLine(E1left); :} ;
			
			
CondFactExprRelopExpr ::= (CondFactComplex) Relop:R1 Expr:E2 {: RESULT=new CondFactComplex(R1, E2); RESULT.setLine(R1left); :}
							|
							(CondFactSimple) {: RESULT=new CondFactSimple(); :} /*epsilon*/
							;
			
Expr ::= (ExprTerm) AddopTermList:A1 {: RESULT=new ExprTerm(A1); RESULT.setLine(A1left); :}
		|
		(ExprMinus) MINUS AddopTermList:A1 {: RESULT=new ExprMinus(A1); RESULT.setLine(A1left); :}
		;

AddopTermList ::= (MultipleAddopTerms) AddopTermList:A1 Addop:A2 Term:T3 {: RESULT=new MultipleAddopTerms(A1, A2, T3); RESULT.setLine(A1left); :}
				|
				(OneTermAddopTerm) Term:T1 {: RESULT=new OneTermAddopTerm(T1); RESULT.setLine(T1left); :}
				;
				
Term ::= (Term) FactorMulopList:F1 {: RESULT=new Term(F1); RESULT.setLine(F1left); :} ;

FactorMulopList ::= (MultipleFactorMulopLists) FactorMulopList:F1 Mulop:M2 Factor:F3 {: RESULT=new MultipleFactorMulopLists(F1, M2, F3); RESULT.setLine(F1left); :}
					|
					(OneFactorMulopList) Factor:F1 {: RESULT=new OneFactorMulopList(F1); RESULT.setLine(F1left); :}
					;

Factor ::= (FactorDesignator) Designator:D1 FactorDesignatorActParsList:F2 {: RESULT=new FactorDesignator(D1, F2); RESULT.setLine(D1left); :}
			|
			(FactorNumCnst) NUMCONSTANT:numValue {: RESULT=new FactorNumCnst(numValue); RESULT.setLine(numValueleft); :}
			|
			(FactorCharCnst)CHARCONSTANT:charValue {: RESULT=new FactorCharCnst(charValue); RESULT.setLine(charValueleft); :}
			|
			(FactorBoolCnst)BOOLCONSTANT:boolValue {: RESULT=new FactorBoolCnst(boolValue); RESULT.setLine(boolValueleft); :}
			|
			(FactorNewArray) NEW Type:T1 LEFTBRACKET Expr:E2 RIGHTBRACKET {: RESULT=new FactorNewArray(T1, E2); RESULT.setLine(T1left); :}
			/*
			|
			(FactorNewClass) NEW Type LEFTPAREN ActPars RIGHTPAREN
			*/
			|
			(FactorExpr) LEFTPAREN Expr:E1 RIGHTPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
			|
			(FactorRange) RANGE LEFTPAREN Expr:E1 RIGHTPAREN {: RESULT=new FactorRange(E1); RESULT.setLine(E1left); :}
			;
			
FactorDesignatorActParsList ::= (ParenPars) LEFTPAREN ActParsList:A1 RIGHTPAREN {: RESULT=new ParenPars(A1); RESULT.setLine(A1left); :}
								|
								(NoParenPars) {: RESULT=new NoParenPars(); :} /*epsilon*/
								;
		
ActParsList ::= (ActParsComplex) ActPars:A1 {: RESULT=new ActParsComplex(A1); RESULT.setLine(A1left); :}
				|
				(NoActPars) {: RESULT=new NoActPars(); :} /*epsilon*/
				;
				
Designator ::= (Designator) DesignatorName:D1 IdentExpressList:I2 {: RESULT=new Designator(D1, I2); RESULT.setLine(D1left); :} ;

DesignatorName ::= (DesignatorName) IDENTIFICATOR:designatorName {: RESULT=new DesignatorName(designatorName); RESULT.setLine(designatorNameleft); :} ;

IdentExpressList ::= (MultiplesIdentExpresses) LEFTBRACKET Expr:E1 RIGHTBRACKET {: RESULT=new MultiplesIdentExpresses(E1); RESULT.setLine(E1left); :}
					|
					(NoIdentExpresses) {: RESULT=new NoIdentExpresses(); :}/*epsilon*/
					;

Label ::= (Label) IDENTIFICATOR:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :} ;

Assignop ::= (AssignopEqual) EQUAL {: RESULT=new AssignopEqual(); :}
			|
			(AssignopError)error SEMICOLON:l {: parser.report_error("Greska kod dodele vrednosti na liniji " + lleft, null); :} {: RESULT=new AssignopError(); :}
			;

Relop ::=  (RelopEqual)ISEQUAL {: RESULT=new RelopEqual(); :} 
			| 
			(RelopNotEqual)NOTEQUAL {: RESULT=new RelopNotEqual(); :} 
			| 
			(RelopGrt)GREATER {: RESULT=new RelopGrt(); :} 
			| 
			(RelopGrtEqual)GREATEREQUAL {: RESULT=new RelopGrtEqual(); :} 
			| 
			(RelopLess)LESS {: RESULT=new RelopLess(); :} 
			| 
			(RelopLessEqual)LESSEQUAL {: RESULT=new RelopLessEqual(); :} 
			;

Addop ::= (AddopPlus)PLUS {: RESULT=new AddopPlus(); :} 
		| 
		(AddopMinus)MINUS {: RESULT=new AddopMinus(); :} 
		;

Mulop ::= (MulopMul) MULTIPLY {: RESULT=new MulopMul(); :} 
		| 
		(MulopDiv)DIVIDE {: RESULT=new MulopDiv(); :} 
		| 
		(MulopMod)MODUO {: RESULT=new MulopMod(); :} 
		;