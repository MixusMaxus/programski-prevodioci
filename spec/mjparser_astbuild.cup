package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, IDENTIFICATOR, LEFTBRACE, RIGHTBRACE, NAMESPACE, LEFTBRACKET, RIGHTBRACKET, LEFTPAREN, RIGHTPAREN, SEMICOLON, COMMA, STATIC ;

terminal CONST, VOID, NEW, CLASS, EXTENDS, DOT ;

terminal EQUAL, ISEQUAL, NOTEQUAL, GREATER, GREATEREQUAL, LESS, LESSEQUAL, PLUS, MINUS, MULTIPLY, DIVIDE, MODUO, DOUBLECOLON ;

terminal IF, ELSE, BREAK, CONTINUE, RETURN, READ, PRINT, FOR, INCREMENT, DECREMENT, AND, OR, COLON ;

nonterminal Program Program;
nonterminal NamespaceList NamespaceList;
nonterminal DeclarationList DeclarationList;
nonterminal Namespace Namespace;
nonterminal Declaration Declaration;
nonterminal VarDecl VarDecl;
nonterminal Type Type;
nonterminal Label Label ;

nonterminal Constant Constant;
nonterminal ConstDecl ConstDecl;
nonterminal ConstantList ConstantList;
nonterminal ConstantDeclaration ConstantDeclaration;
nonterminal VarList VarList;
nonterminal Variable Variable;
nonterminal StaticInitializer StaticInitializer;
nonterminal StatementList StatementList ;

nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal MethodReturnType MethodReturnType;
nonterminal MethodParamList MethodParamList;
nonterminal FormParsList FormParsList;
nonterminal VarDeclList VarDeclList;
nonterminal OneParamMethod OneParamMethod ;

nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal ForDesignatorStatement ForDesignatorStatement;
nonterminal InnerForDesignatorStatement InnerForDesignatorStatement;
nonterminal InnerForDesignatorStatementList InnerForDesignatorStatementList;
nonterminal ForCondFact ForCondFact ;

nonterminal Designator Designator;
nonterminal Expr Expr;
nonterminal InsideFor InsideFor;
nonterminal FirstDesignator FirstDesignator;
nonterminal SecondDesignator SecondDesignator;
nonterminal DesignatorList DesignatorList;
nonterminal OneDesignator OneDesignator;
nonterminal IdentExpressList IdentExpressList;
nonterminal IdentExpressListElem IdentExpressListElem ;

nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal ActParsList ActParsList;
nonterminal ActPars ActPars;
nonterminal Condition Condition;
nonterminal CondFact CondFact;
nonterminal CondTerm CondTerm;
nonterminal Term Term;
nonterminal AddopTermList AddopTermList;
nonterminal Factor Factor;
nonterminal FactorMulopList FactorMulopList ;

terminal String IDENT;
terminal Character CHARCONSTANT;
terminal Integer NUMCONSTANT;
terminal Boolean BOOLCONSTANT;

Program ::= PROGRAM IDENTIFICATOR NamespaceList:N1 DeclarationList:D2 LEFTBRACE MethodDeclList:M3 RIGHTBRACE {: RESULT=new ProgramDerived1(N1, D2, M3); RESULT.setLine(N1left); :} ;

NamespaceList ::= NamespaceList:N1 Namespace:N2 {: RESULT=new NamespaceListDerived1(N1, N2); RESULT.setLine(N1left); :}
				| {: RESULT=new NamespaceListDerived2(); :}
					/*epsilon*/
				;

Namespace ::= NAMESPACE IDENTIFICATOR LEFTBRACE DeclarationList:D1 LEFTBRACE MethodDeclList:M2 RIGHTBRACE RIGHTBRACE {: RESULT=new NamespaceDerived1(D1, M2); RESULT.setLine(D1left); :} ;

DeclarationList ::= DeclarationList:D1 Declaration:D2 {: RESULT=new DeclarationListDerived1(D1, D2); RESULT.setLine(D1left); :}
				| {: RESULT=new DeclarationListDerived2(); :}
					/*epsilon*/
				;

Declaration ::= ConstDecl:C1 {: RESULT=new DeclarationDerived1(C1); RESULT.setLine(C1left); :} 
				|
				 VarDecl:V1 {: RESULT=new DeclarationDerived2(V1); RESULT.setLine(V1left); :} 
				/*|
				 ClassDecl*/
				;
				
ConstDecl ::= CONST Type:T1 ConstantList:C2 SEMICOLON {: RESULT=new ConstDeclDerived1(T1, C2); RESULT.setLine(T1left); :} ;

ConstantList ::= ConstantList:C1 COMMA ConstantDeclaration:C2 {: RESULT=new ConstantListDerived1(C1, C2); RESULT.setLine(C1left); :} 
				|
				ConstantDeclaration:C1 {: RESULT=new ConstantListDerived2(C1); RESULT.setLine(C1left); :}
				;

ConstantDeclaration ::= IDENTIFICATOR EQUAL Constant:C1 {: RESULT=new ConstantDeclarationDerived1(C1); RESULT.setLine(C1left); :} ;

Constant ::= NUMCONSTANT:N1 {: RESULT=new ConstantDerived1(N1); RESULT.setLine(N1left); :} 
			|
			CHARCONSTANT:C1 {: RESULT=new ConstantDerived2(C1); RESULT.setLine(C1left); :}  
			|
			BOOLCONSTANT:B1 {: RESULT=new ConstantDerived3(B1); RESULT.setLine(B1left); :} 
			;
			
VarDecl ::= Type:T1 VarList:V2 SEMICOLON {: RESULT=new VarDeclDerived1(T1, V2); RESULT.setLine(T1left); :} ;

VarList ::= VarList:V1 COMMA Variable:V2 {: RESULT=new VarListDerived1(V1, V2); RESULT.setLine(V1left); :} 
			|
			Variable:V1 {: RESULT=new VarListDerived2(V1); RESULT.setLine(V1left); :}
			;

Variable ::= IDENTIFICATOR LEFTBRACKET RIGHTBRACKET {: RESULT=new VariableDerived1(); :} ;

StaticInitializer ::= STATIC LEFTBRACE StatementList:S1 RIGHTBRACE {: RESULT=new StaticInitializerDerived1(S1); RESULT.setLine(S1left); :} ;

MethodDeclList ::= MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclListDerived1(M1, M2); RESULT.setLine(M1left); :}
					| {: RESULT=new MethodDeclListDerived2(); :}
					/*epsilon*/
					;

MethodDecl ::= MethodReturnType:M1 IDENTIFICATOR LEFTPAREN MethodParamList:M2 RIGHTPAREN VarDeclList:V3 LEFTBRACE StatementList:S4 RIGHTBRACE {: RESULT=new MethodDeclDerived1(M1, M2, V3, S4); RESULT.setLine(M1left); :} ;

MethodReturnType ::= Type:T1 {: RESULT=new MethodReturnTypeDerived1(T1); RESULT.setLine(T1left); :} | VOID {: RESULT=new MethodReturnTypeDerived2(); :} ;

MethodParamList ::= FormParsList:F1 {: RESULT=new MethodParamListDerived1(F1); RESULT.setLine(F1left); :} 
					| {: RESULT=new MethodParamListDerived2(); :}
					/*epsilon*/
					;

FormParsList ::= FormParsList:F1 COMMA OneParamMethod:O2 {: RESULT=new FormParsListDerived1(F1, O2); RESULT.setLine(F1left); :}
				|
				OneParamMethod:O1 {: RESULT=new FormParsListDerived2(O1); RESULT.setLine(O1left); :}
				;

OneParamMethod ::= Type:T1 IDENTIFICATOR LEFTBRACKET RIGHTBRACKET {: RESULT=new OneParamMethodDerived1(T1); RESULT.setLine(T1left); :} ;

VarDeclList ::= VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclListDerived1(V1, V2); RESULT.setLine(V1left); :}
				| {: RESULT=new VarDeclListDerived2(); :}
				/*epsilon*/
				;
				
Type ::= IDENTIFICATOR {: RESULT=new TypeDerived1(); :} ;

Statement ::= DesignatorStatement:D1 SEMICOLON {: RESULT=new StatementDerived1(D1); RESULT.setLine(D1left); :}
				|
				IF LEFTPAREN Condition:C1 RIGHTPAREN {: RESULT=new StatementDerived2(C1); RESULT.setLine(C1left); :}
				|
				IF LEFTPAREN Condition:C1 RIGHTPAREN ELSE Statement:S2 {: RESULT=new StatementDerived3(C1, S2); RESULT.setLine(C1left); :}
				|
				BREAK SEMICOLON {: RESULT=new StatementDerived4(); :}
				|
				CONTINUE SEMICOLON {: RESULT=new StatementDerived5(); :}
				|
				RETURN SEMICOLON {: RESULT=new StatementDerived6(); :}
				|
				RETURN Expr:E1 SEMICOLON {: RESULT=new StatementDerived7(E1); RESULT.setLine(E1left); :}
				|
				READ LEFTPAREN Designator:D1 RIGHTPAREN SEMICOLON {: RESULT=new StatementDerived8(D1); RESULT.setLine(D1left); :}
				|
				PRINT LEFTPAREN Expr:E1 RIGHTPAREN SEMICOLON {: RESULT=new StatementDerived9(E1); RESULT.setLine(E1left); :}
				|
				PRINT LEFTPAREN Expr:E1 COMMA NUMCONSTANT:N2 RIGHTPAREN SEMICOLON {: RESULT=new StatementDerived10(E1, N2); RESULT.setLine(E1left); :}
				|
				FOR LEFTPAREN InsideFor:I1 RIGHTPAREN Statement:S2 {: RESULT=new StatementDerived11(I1, S2); RESULT.setLine(I1left); :}
				|
				LEFTBRACE StatementList:S1 RIGHTBRACE {: RESULT=new StatementDerived12(S1); RESULT.setLine(S1left); :}
			 	;
				
InsideFor ::= ForDesignatorStatement:F1 SEMICOLON ForCondFact:F2 SEMICOLON ForDesignatorStatement:F3 {: RESULT=new InsideForDerived1(F1, F2, F3); RESULT.setLine(F1left); :} ;

ForCondFact ::= CondFact:C1 {: RESULT=new ForCondFactDerived1(C1); RESULT.setLine(C1left); :} 
				| {: RESULT=new ForCondFactDerived2(); :}
				/*epsilon*/
				;
				
ForDesignatorStatement ::= InnerForDesignatorStatement:I1 {: RESULT=new ForDesignatorStatementDerived1(I1); RESULT.setLine(I1left); :}
							| {: RESULT=new ForDesignatorStatementDerived2(); :}
							/*epsilon*/
							;

InnerForDesignatorStatement ::= DesignatorStatement:D1 InnerForDesignatorStatementList:I2 {: RESULT=new InnerForDesignatorStatementDerived1(D1, I2); RESULT.setLine(D1left); :} ;

InnerForDesignatorStatementList ::= COMMA DesignatorStatement:D1 {: RESULT=new InnerForDesignatorStatementListDerived1(D1); RESULT.setLine(D1left); :}
									| {: RESULT=new InnerForDesignatorStatementListDerived2(); :}
									/*epsilon*/
									;

StatementList ::=  StatementList:S1 Statement:S2 {: RESULT=new StatementListDerived1(S1, S2); RESULT.setLine(S1left); :}
				| {: RESULT=new StatementListDerived2(); :}
				/*epsilon */
			 	;

DesignatorStatement ::= Designator:D1 FirstDesignator:F2 {: RESULT=new DesignatorStatementDerived1(D1, F2); RESULT.setLine(D1left); :}
						|
						SecondDesignator:S1 EQUAL Designator:D2 {: RESULT=new DesignatorStatementDerived2(S1, D2); RESULT.setLine(S1left); :}
						;

FirstDesignator ::= Assignop:A1 Expr:E2 {: RESULT=new FirstDesignatorDerived1(A1, E2); RESULT.setLine(A1left); :}
					|
					LEFTPAREN ActParsList:A1 RIGHTPAREN {: RESULT=new FirstDesignatorDerived2(A1); RESULT.setLine(A1left); :}
					|
					INCREMENT {: RESULT=new FirstDesignatorDerived3(); :}
					|
					DECREMENT {: RESULT=new FirstDesignatorDerived4(); :}
					;
				
SecondDesignator ::= LEFTBRACKET DesignatorList:D1 MULTIPLY Designator:D2 RIGHTBRACKET {: RESULT=new SecondDesignatorDerived1(D1, D2); RESULT.setLine(D1left); :} ;

DesignatorList ::= DesignatorList:D1 COMMA OneDesignator:O2 {: RESULT=new DesignatorListDerived1(D1, O2); RESULT.setLine(D1left); :}
					|
					OneDesignator:O1 {: RESULT=new DesignatorListDerived2(O1); RESULT.setLine(O1left); :}
					;
					
OneDesignator ::= Designator:D1 {: RESULT=new OneDesignatorDerived1(D1); RESULT.setLine(D1left); :} 
					| {: RESULT=new OneDesignatorDerived2(); :}
					/*epsilon*/
					;
					
ActPars ::= ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParsDerived1(A1, E2); RESULT.setLine(A1left); :}
			|
			Expr:E1 {: RESULT=new ActParsDerived2(E1); RESULT.setLine(E1left); :}
			;
			
Condition ::= Condition:C1 OR CondTerm:C2 {: RESULT=new ConditionDerived1(C1, C2); RESULT.setLine(C1left); :}
				|
				CondTerm:C1 {: RESULT=new ConditionDerived2(C1); RESULT.setLine(C1left); :}
				;
				
CondTerm ::= CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermDerived1(C1, C2); RESULT.setLine(C1left); :}
			|
			CondFact:C1 {: RESULT=new CondTermDerived2(C1); RESULT.setLine(C1left); :}
			;

CondFact ::= Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactDerived1(E1, R2, E3); RESULT.setLine(E1left); :}
			|
			Expr:E1 {: RESULT=new CondFactDerived2(E1); RESULT.setLine(E1left); :}
			;
			
Expr ::= Term:T1 AddopTermList:A2 {: RESULT=new ExprDerived1(T1, A2); RESULT.setLine(T1left); :}
		|
		MINUS Term:T1 AddopTermList:A2 {: RESULT=new ExprDerived2(T1, A2); RESULT.setLine(T1left); :}
		;

AddopTermList ::= AddopTermList:A1 Addop:A2 Term:T3 {: RESULT=new AddopTermListDerived1(A1, A2, T3); RESULT.setLine(A1left); :}
				| {: RESULT=new AddopTermListDerived2(); :}
				/*epsilon*/
				;
				
Term ::= Factor:F1 FactorMulopList:F2 {: RESULT=new TermDerived1(F1, F2); RESULT.setLine(F1left); :} ;

FactorMulopList ::= Factor:F1 Mulop:M2 {: RESULT=new FactorMulopListDerived1(F1, M2); RESULT.setLine(F1left); :}
					| {: RESULT=new FactorMulopListDerived2(); :}
					/*epsilon*/
					;

Factor ::= Designator:D1 LEFTPAREN ActPars:A2 RIGHTPAREN {: RESULT=new FactorDerived1(D1, A2); RESULT.setLine(D1left); :}
			|
			Designator:D1 {: RESULT=new FactorDerived2(D1); RESULT.setLine(D1left); :}
			|
			NUMCONSTANT:N1 {: RESULT=new FactorDerived3(N1); RESULT.setLine(N1left); :}
			|
			CHARCONSTANT:C1 {: RESULT=new FactorDerived4(C1); RESULT.setLine(C1left); :}
			|
			BOOLCONSTANT:B1 {: RESULT=new FactorDerived5(B1); RESULT.setLine(B1left); :}
			|
			NEW Type:T1 LEFTBRACKET Expr:E2 RIGHTBRACKET {: RESULT=new FactorDerived6(T1, E2); RESULT.setLine(T1left); :}
			|
			NEW Type:T1 LEFTPAREN ActPars:A2 RIGHTPAREN {: RESULT=new FactorDerived7(T1, A2); RESULT.setLine(T1left); :}
			|
			LEFTPAREN Expr:E1 RIGHTPAREN {: RESULT=new FactorDerived8(E1); RESULT.setLine(E1left); :}
			;
			
ActParsList ::= ActParsList:A1 ActPars:A2 {: RESULT=new ActParsListDerived1(A1, A2); RESULT.setLine(A1left); :}
				| {: RESULT=new ActParsListDerived2(); :}
				/*epsilon*/
				;
				
Designator ::= 	IDENTIFICATOR DOUBLECOLON IDENTIFICATOR IdentExpressList:I1 {: RESULT=new DesignatorDerived1(I1); RESULT.setLine(I1left); :} 
				|
				IDENTIFICATOR IdentExpressList:I1 {: RESULT=new DesignatorDerived2(I1); RESULT.setLine(I1left); :}
				;

IdentExpressList ::= IdentExpressList:I1 IdentExpressListElem:I2 {: RESULT=new IdentExpressListDerived1(I1, I2); RESULT.setLine(I1left); :}
					| {: RESULT=new IdentExpressListDerived2(); :}
					/*epsilon*/
					;
					
IdentExpressListElem ::= 	COMMA IDENTIFICATOR {: RESULT=new IdentExpressListElemDerived1(); :}
							|
							LEFTBRACKET Expr:E1 RIGHTBRACKET {: RESULT=new IdentExpressListElemDerived2(E1); RESULT.setLine(E1left); :}
							;

Label ::= IDENTIFICATOR {: RESULT=new LabelDerived1(); :} ;

Assignop ::= EQUAL {: RESULT=new AssignopDerived1(); :} ;

Relop ::= ISEQUAL {: RESULT=new RelopDerived1(); :} | NOTEQUAL {: RESULT=new RelopDerived2(); :} | GREATER {: RESULT=new RelopDerived3(); :} | GREATEREQUAL {: RESULT=new RelopDerived4(); :} | LESS {: RESULT=new RelopDerived5(); :} | LESSEQUAL {: RESULT=new RelopDerived6(); :} ;

Addop ::= PLUS {: RESULT=new AddopDerived1(); :} | MINUS {: RESULT=new AddopDerived2(); :} ;

Mulop ::= MULTIPLY {: RESULT=new MulopDerived1(); :} | DIVIDE {: RESULT=new MulopDerived2(); :} | MODUO {: RESULT=new MulopDerived3(); :} ;